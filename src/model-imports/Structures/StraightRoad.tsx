/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import type { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import path_straight from './path_straight.glb'

type GLTFResult = GLTF & {
  nodes: {
    Mesh_path_straight: THREE.Mesh
    Mesh_path_straight_1: THREE.Mesh
  }
  materials: {
    wood: THREE.MeshStandardMaterial
    dirt: THREE.MeshStandardMaterial
  }
}

export default function StraightRoad(props: JSX.IntrinsicElements['group'] & { playerColor: string }) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF(path_straight) as GLTFResult
  const playerMaterials: Record<string, THREE.Material> = React.useMemo(() => ({
    red: new THREE.MeshStandardMaterial({ color: 'red' }),
    blue: new THREE.MeshStandardMaterial({ color: 'blue' }),
    white: new THREE.MeshStandardMaterial({ color: 'white' }),
    green: new THREE.MeshStandardMaterial({ color: 'green' }),
    gray: new THREE.MeshStandardMaterial({ color: 'gray' }),
  }), [])
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Mesh_path_straight.geometry} material={playerMaterials[props.playerColor]} />
      <mesh geometry={nodes.Mesh_path_straight_1.geometry} material={materials.dirt} />
    </group>
  )
}

useGLTF.preload(path_straight)
